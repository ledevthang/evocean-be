generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  address   String? @unique @db.VarChar
  google_id String? @unique
  email     String? @unique @db.VarChar

  themes     Theme[]
  Collection Collection[]

  @@map("user")
}

model Theme {
  id                    Int               @id @default(autoincrement())
  zip_link              String            @db.VarChar
  name                  String            @db.VarChar
  overview              String            @db.VarChar
  media                 Json
  owner_addresses       String[]          @db.VarChar
  token_mint            String?           @db.VarChar
  author_address        String?           @db.VarChar
  sale                  ThemeSale?
  listing               ThemeListing?
  transactions          Transaction[]
  user                  User?             @relation(fields: [user_id], references: [id])
  user_id               Int?
  status                ThemeStatus
  linkPreview           String?           @map("link_preview")
  selling_price         Decimal
  owner_price           Decimal
  percentageOfOwnership Decimal?          @map("percentage_of_ownership")
  owned_at              DateTime?
  created_at            DateTime          @default(now())
  updated_at            DateTime?
  themeCategories       ThemeCategories[]
  themeTags             ThemeTags[]
  themeCollection       ThemeCollection[]
  themeFeatures         ThemeFeatures[]

  @@map("theme")
}

model ThemeCategories {
  id         Int      @id @default(autoincrement())
  categoryId Int      @map("category_id")
  themeId    Int      @map("theme_id")
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  theme      Theme    @relation(fields: [themeId], references: [id], onDelete: Cascade)

  @@map("theme_category")
}

model Category {
  id              Int               @id @default(autoincrement())
  createdAt       DateTime          @default(now()) @map("created_at")
  name            String
  ThemeCategories ThemeCategories[]

  @@map("category")
}

model ThemeTags {
  id      Int   @id @default(autoincrement())
  tagId   Int   @map("tag_id")
  themeId Int   @map("theme_id")
  theme   Theme @relation(fields: [themeId], references: [id], onDelete: Cascade)
  tag     Tag   @relation(fields: [tagId], references: [id])

  @@map("theme_tag")
}

model Tag {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now()) @map("created_at")
  name      String
  ThemeTags ThemeTags[]

  @@map("tag")
}

model Features {
  id            Int             @id @default(autoincrement())
  createdAt     DateTime        @default(now()) @map("created_at")
  name          String
  featureTypeId Int             @map("feature_type_id")
  FeatureTypes  FeatureTypes    @relation(fields: [featureTypeId], references: [id])
  ThemeFeatures ThemeFeatures[]

  @@map("features")
}

model FeatureTypes {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now()) @map("created_at")
  name      String
  Features  Features[]

  @@map("file_types")
}

model ThemeFeatures {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  featureId Int      @map("feature_id")
  themeId   Int      @map("theme_id")
  Features  Features @relation(fields: [featureId], references: [id])
  Theme     Theme    @relation(fields: [themeId], references: [id])

  @@index([featureId, themeId])
  @@map("theme_features")
}

// buy for download 
model ThemeSale {
  theme_id Int     @id @unique
  price    Decimal
  theme    Theme   @relation(fields: [theme_id], references: [id], onDelete: Cascade)

  @@map("theme_sale")
}

// buy the ownership
model ThemeListing {
  theme_id Int     @id @unique
  price    Decimal
  theme    Theme   @relation(fields: [theme_id], references: [id], onDelete: Cascade)

  @@map("theme_listing")
}

model CryptoPrices {
  id           Int      @id @default(autoincrement())
  token_id     String   @unique
  token_symbol String   @unique
  price_usd    Decimal
  last_updated DateTime

  @@map("crypto_prices")
}

model Transaction {
  id       Int             @id @default(autoincrement())
  tx_id    String
  date     DateTime        @default(now()) @db.Timestamptz(3)
  price    Decimal
  buyer    String
  seller   String
  theme_id Int
  kind     TransactionKind
  theme    Theme           @relation(fields: [theme_id], references: [id])
  currency Currency

  @@map("transaction")
}

model ThemeCollection {
  id           Int        @id @default(autoincrement())
  collectionId Int        @map("collection_id")
  themeId      Int        @map("themme_id")
  theme        Theme      @relation(fields: [themeId], references: [id], onDelete: Cascade)
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@map("theme_collection")
}

model Collection {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar

  created_at      DateTime          @default(now())
  created_by      Int
  updated_at      DateTime?
  updated_by      Int?
  User            User              @relation(fields: [created_by], references: [id])
  themeCollection ThemeCollection[]

  @@map("collection")
}

enum TransactionKind {
  buy_owned_ship
  buy

  @@map("transaction_kind")
}

enum Currency {
  sol
  usd

  @@map("currency")
}

enum ThemeStatus {
  DRAFT
  PENDING
  APPROVED

  @@map("theme_status")
}
