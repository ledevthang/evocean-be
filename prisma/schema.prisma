generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  address   String? @unique @db.VarChar
  google_id String? @unique
  email     String? @unique @db.VarChar

  themes     Theme[]
  Collection Collection[]

  @@map("user")
}

model Theme {
  id              Int           @id @default(autoincrement())
  zip_link        String        @db.VarChar
  name            String        @db.VarChar
  overview        String        @db.VarChar
  media           Json
  owner_addresses String[]      @db.VarChar
  token_mint      String?       @db.VarChar
  author_address  String?       @db.VarChar
  sale            ThemeSale?
  listing         ThemeListing?
  transactions    Transaction[]
  user            User?         @relation(fields: [user_id], references: [id])
  user_id         Int?
  status          ThemeStatus
  selling_price   Decimal
  owner_price     Decimal
  owned_at        DateTime?
  created_at      DateTime      @default(now())
  updated_at      DateTime?
  Collection      Collection?   @relation(fields: [collection_id], references: [id], onDelete: SetNull)
  collection_id   Int?

  @@map("theme")
}

// buy for download 
model ThemeSale {
  theme_id Int     @id @unique
  price    Decimal
  theme    Theme   @relation(fields: [theme_id], references: [id], onDelete: Cascade)

  @@map("theme_sale")
}

// buy the ownership
model ThemeListing {
  theme_id Int     @id @unique
  price    Decimal
  theme    Theme   @relation(fields: [theme_id], references: [id], onDelete: Cascade)

  @@map("theme_listing")
}

model CryptoPrices {
  id           Int      @id @default(autoincrement())
  token_id     String   @unique
  token_symbol String   @unique
  price_usd    Decimal
  last_updated DateTime

  @@map("crypto_prices")
}

model Transaction {
  id       Int             @id @default(autoincrement())
  tx_id    String
  date     DateTime        @default(now()) @db.Timestamptz(3)
  price    Decimal
  buyer    String
  seller   String
  theme_id Int
  kind     TransactionKind
  theme    Theme           @relation(fields: [theme_id], references: [id])
  currency Currency

  @@map("transaction")
}

model Collection {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar
  themes     Theme[]
  created_at DateTime  @default(now())
  created_by Int
  updated_at DateTime?
  updated_by Int?
  User       User      @relation(fields: [created_by], references: [id])

  @@map("collection")
}

enum TransactionKind {
  buy_owned_ship
  buy

  @@map("transaction_kind")
}

enum Currency {
  sol
  usd

  @@map("currency")
}

enum ThemeStatus {
  DRAFT
  PENDING
  APPROVED

  @@map("theme_status")
}
